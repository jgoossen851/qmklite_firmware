from collections import namedtuple
from enum import IntFlag, IntEnum
from struct import Struct


class XAPRequest(namedtuple('XAPRequest', 'token length data')):
    fmt = Struct('<HB61s')

    def __new__(cls, *args):
        return super().__new__(cls, *args)

    @staticmethod
    def from_bytes(data):
        return XAPRequest._make(XAPRequest.fmt.unpack(data))

    def to_bytes(self):
        return self.fmt.pack(*list(self))


class XAPResponse(namedtuple('XAPResponse', 'token flags length data')):
    fmt = Struct('<HBB60s')

    def __new__(cls, *args):
        return super().__new__(cls, *args)

    @staticmethod
    def from_bytes(data):
        return XAPResponse._make(XAPResponse.fmt.unpack(data))

    def to_bytes(self):
        return self.fmt.pack(*list(self))


class XAPSecureStatus(IntEnum):
    LOCKED = 0x00
    UNLOCKING = 0x01
    UNLOCKED = 0x02


class XAPEventType(IntEnum):
{%- for id, message in xap.broadcast_messages.messages | dictsort %}
    {{ message.define }} = {{ id }}
{%- endfor %}


class XAPFlags(IntFlag):
{%- for bitnum, bitinfo in xap.response_flags.bits | dictsort %}
{%- if bitinfo.define != "-" %}
    {{ bitinfo.define }} = 1 << {{ bitnum }}
{%- endif %}
{%- endfor %}

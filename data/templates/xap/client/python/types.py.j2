from collections import namedtuple
from enum import IntFlag, IntEnum
from struct import Struct

{% set type_definitions = [{'name':'XAPRequest', 'members': 'token length data', 'fmt':'<HB61s'}, {'name':'XAPResponse', 'members': 'token flags length data', 'fmt':'<HBB60s'}] %}
{% for item in type_definitions -%}
class {{ item.name }}(namedtuple('{{ item.name }}', '{{ item.members }}')):
    fmt = Struct('{{ item.fmt }}')

    def __new__(cls, *args):
        return super().__new__(cls, *args)

    @classmethod
    def from_bytes(cls, data):
        return cls._make(cls.fmt.unpack(data))

    def to_bytes(self):
        return self.fmt.pack(*list(self))


{% endfor -%}
class XAPSecureStatus(IntEnum):
    LOCKED = 0x00
    UNLOCKING = 0x01
    UNLOCKED = 0x02


class XAPEventType(IntEnum):
{%- for id, message in xap.broadcast_messages.messages | dictsort %}
    {{ message.define }} = {{ id }}
{%- endfor %}


class XAPFlags(IntFlag):
{%- for bitnum, bitinfo in xap.response_flags.bits | dictsort %}
{%- if bitinfo.define != "-" %}
    {{ bitinfo.define }} = 1 << {{ bitnum }}
{%- endif %}
{%- endfor %}
